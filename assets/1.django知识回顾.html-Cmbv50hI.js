import{_ as i,c as a,e,o as p}from"./app-D5peQ_E2.js";const t="/images/D34E145E31EF45E2B6EB1F1719DA81AFclipboard.png",n="/images/E17427775FE84472B9C09BB004F751C0clipboard.png",l="/images/FA431794CEC14C5DB652997DE4A72F16clipboard.png",r="/images/2651E0F3AB50418585350C0E004817FFclipboard.png",d="/images/74A3F38F114F437AA36095C282EA3DDEclipboard.png",o="/images/F6C62EC5926145F2B6A0B71C8A488A89clipboard.png",h="/images/CF49F3A738ED4FE1BE2BC41AAFF3C3C5clipboard.png",c="/images/B05108E86E374381AFB13F3A3443B2EFclipboard.png",m="/images/7E7D563E6C3F47D1B8AB9B0D5E4982CAclipboard.png",g="/images/897C736BF6F44F76A9284D3CA42E2318clipboard.png",k={};function u(A,s){return p(),a("div",null,s[0]||(s[0]=[e('<h2 id="前后端分离开发模式" tabindex="-1"><a class="header-anchor" href="#前后端分离开发模式"><span>前后端分离开发模式</span></a></h2><p><img src="'+t+'" alt=""></p><p>前后端分离前：前端页面看到的效果都是由后端控制，即后端渲染HTML页面，前端与后端的耦合度很高。</p><p>前后端分离前存在的问题：</p><ul><li><p>PC、APP、Pad等多端流行</p></li><li><p>前后端开发职责不清晰：各司其职，最大程度减少开发难度，方便协作</p></li><li><p>开发效率问题，一般后端开发需先等前端页面准备好，有时前端也一直配 合后端，能力受限</p></li><li><p>前后端代码混在一起，日积月累，维护成本增加</p></li><li><p>后端开发语言和模板耦合</p></li></ul><p><img src="'+n+'" alt=""></p><p>前后端分离后：后端仅返回前端所需要的数据，不再渲染HTML页面，不再 控制前端的效果，至于前端展示什么效果，都由前端自己决定。</p><h2 id="认识restfulapi" tabindex="-1"><a class="header-anchor" href="#认识restfulapi"><span>认识RestFulAPI</span></a></h2><p>什么是RestfulAPI：</p><ul><li><p>REST（Representational State Transfer，表征状态转移）是一种Web服务的软件架构风格。 描述网络中客户端与服务端的一种交互方式，它本身不常用，常用的是如何设计RestfulAPI （REST风格的网络接口）</p></li><li><p>RestfulAPI风格就是把所有的数据都当做资源，对表的操作就是对资源操作</p></li><li><p>资源就是指的URL，基于URL对资源操作，Web服务在URL上支持一系列请求方法，如下表所 示。</p></li></ul><p><img src="'+l+'" alt=""></p><p>示例：</p><p>非REST的URL：http://ip/get_user?id=123</p><p>REST的URL：http://ip/user/123</p><h2 id="回顾django开发模式" tabindex="-1"><a class="header-anchor" href="#回顾django开发模式"><span>回顾Django开发模式</span></a></h2><p><img src="'+r+`" alt=""></p><h2 id="django-rest-framework初探" tabindex="-1"><a class="header-anchor" href="#django-rest-framework初探"><span>Django REST Framework初探</span></a></h2><p>Django REST framework （简称：DRF）是一个强大而灵活的Web API 工具。 遵循RESTFullAPI风格，功能完善，可快速开发API平台。</p><p>官网文档：https:// www.django-rest-framework.org</p><p>Django REST framework 最新版使用要求：</p><ul><li><p>Python（3.6、3.7、3.8、3.9、3.10）</p></li><li><p>Django（2.2、3.0、3.1、3.2、4.0）</p></li></ul><p>安装：</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">pip install djangorestframework</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>添加rest_framework到INSTALLED_APPS设置中：</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">INSTALLED_APPS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    ...</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">rest_framework</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：实现用户增删改查</p><p>步骤：</p><p>一、创建APP</p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">python manage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">py startapp myapp_api</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>二、定义数据模型并同步数据库</p><p><img src="`+d+`" alt=""></p><div class="language-python line-numbers-mode" data-ext="python" data-title="python"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">python manage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">py makemigrations </span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">python manage</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">py migrate</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>三、编写序列化器文件</p><p>myapp_api/serializers.py</p><p><img src="`+o+'" alt=""></p><p>四、编写视图</p><p><img src="'+h+'" alt=""></p><p>五、添加API路由</p><p>devops/urls.py</p><p><img src="'+c+'" alt=""></p><p>myapp_api/urls.py</p><p><img src="'+m+'" alt=""></p><p><img src="'+g+'" alt=""></p><p>上图是访问/myapp_api/api/地址获得。</p><p>这是DRF自带的API调试系统，结果显示自动注册路由的API 地址，可通过这个地址完成用户信息数据的增删改查：</p><p>增、查：http://127.0.0.1:8000/myapp_api/api/user/</p><p>删、改：http://127.0.0.1:8000/myapp_api/api/user/2/</p>',47)]))}const y=i(k,[["render",u],["__file","1.django知识回顾.html.vue"]]),v=JSON.parse(`{"path":"/notes/django/upgrade/1.django%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE.html","title":"django知识回顾","lang":"zh-CN","frontmatter":{"title":"django知识回顾","date":"2024-05-01T08:45:32.000Z","type":"categories","categories":"DRF","tag":"DRF","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;const isDark = um === 'dark' || (um !== 'light' && sm);document.documentElement.dataset.theme = isDark ? 'dark' : 'light';})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"前后端分离开发模式","slug":"前后端分离开发模式","link":"#前后端分离开发模式","children":[]},{"level":2,"title":"认识RestFulAPI","slug":"认识restfulapi","link":"#认识restfulapi","children":[]},{"level":2,"title":"回顾Django开发模式","slug":"回顾django开发模式","link":"#回顾django开发模式","children":[]},{"level":2,"title":"Django REST Framework初探","slug":"django-rest-framework初探","link":"#django-rest-framework初探","children":[]}],"readingTime":{"minutes":2.07,"words":622},"filePathRelative":"notes/django/upgrade/1.django知识回顾.md"}`);export{y as comp,v as data};
