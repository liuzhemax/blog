import{_ as i,c as a,e as n,o as l}from"./app-D5peQ_E2.js";const e="/images/B827CF15481445E89E1D1034D29041CDclipboard.png",p="/images/7C6041A0731C48E8871D77AE1A19C384clipboard.png",t="/images/58A4C504154C42139DB62DBB35DC626Aclipboard.png",h="/images/4C6D98958A53495A8A2C599B4FCEE2A7clipboard.png",k="/images/E8B277C4EF1843DA8D20EAFF4D60A844clipboard.png",d="/images/5A9BDD04F43240559B4915A1115A732Dclipboard.png",r="/images/BE93E537DA2644D08C62BA6ADE103640clipboard.png",c="/images/6713FFDDE2824151A31B4C4AB3D27349clipboard.png",o="/images/713BC2D00F444CF1B0A30B74B6D6ADF0clipboard.png",A="/images/9944A097E9DA43589BB46BAA9FDE8705clipboard.png",g="/images/ADAFF9FA70284DD0B24FD4106D012B12clipboard.png",u="/images/B22931364F2B416D996CA61EBCEA7013clipboard.png",v="/images/0885EF19E4D24FE5998D0FCD2F90A0A0clipboard.png",y="/images/C220687577084968908D41C5CD8E9F3Fclipboard.png",m="/images/676EE94556D9494C85C7765856BE3E7Bclipboard.png",b="/images/0E59C28B367A4A76921B50CA20B67F59clipboard.png",D="/images/D45782348B0D40C39F526C0B7297606Fclipboard.png",C="/images/D06CDA70F2FC4AF984902BCCA9DC0D48clipboard.png",B={};function P(f,s){return l(),a("div",null,s[0]||(s[0]=[n('<h2 id="k8s网络组件之calico" tabindex="-1"><a class="header-anchor" href="#k8s网络组件之calico"><span>K8s网络组件之Calico</span></a></h2><p>Calico是一个纯三层的数据中心网络方案，Calico支持广泛的平台，包括Kubernetes、OpenStack等。 Calico 在每一个计算节点利用 Linux Kernel 实现了一个高效的虚拟路由器（ vRouter） 来负责数据转发， 而每个 vRouter 通过 BGP 协议负责把自己上运行的 workload 的路由信息向整个 Calico 网络内传播。 此外，Calico 项目还实现了 Kubernetes 网络策略，提供ACL功能。</p><p>实际上，Calico项目提供的网络解决方案，与Flannel的host-gw模式几乎一样。也就是说，Calico也是基于 路由表实现容器数据包转发，但不同于Flannel使用flanneld进程来维护路由信息的做法，而Calico项目使用 BGP协议来自动维护整个集群的路由信息。</p><p>BGP英文全称是Border Gateway Protocol，即边界网关协议，它是一种自治系统间的动态路由发现协议， 与其他 BGP 系统交换网络可达信息。</p><h2 id="k8s网络组件之calico-bgp介绍" tabindex="-1"><a class="header-anchor" href="#k8s网络组件之calico-bgp介绍"><span>K8s网络组件之Calico：BGP介绍</span></a></h2><p><img src="'+e+'" alt=""></p><p>在这个图中，有两个自治系统（autonomous system，简称为AS）：AS 1 和 AS 2。</p><p>在互联网中，一个自治系统(AS)是一个有权自主地决定在本系统中应采用何种路由协议的小型单位。这 个网络单位可以是一个简单的网络也可以是一个由一个或多个普通的网络管理员来控制的网络群体，它 是一个单独的可管理的网络单元（例如一所大学，一个企业或者一个公司个体）。一个自治系统有时也 被称为是一个路由选择域（routing domain）。一个自治系统将会分配一个全局的唯一的16位号码， 有时我们把这个号码叫做自治系统号（ASN）。</p><p>在正常情况下，自治系统之间不会有任何来往。如果两个自治系统里的主机，要通过 IP 地址直接进行通 信，我们就必须使用路由器把这两个自治系统连接起来。BGP协议就是让他们互联的一种方式。</p><p><img src="'+p+'" alt=""></p><p>在了解了 BGP 之后，Calico 项目的架构就非常容易理解了，</p><p>Calico主要由三个部分组成：</p><ul><li><p>Felix：以DaemonSet方式部署，运行在每一个Node节点上， 主要负责维护宿主机上路由规则以及ACL规则。</p></li><li><p>BGP Client（BIRD）：主要负责把 Felix 写入 Kernel 的路 由信息分发到集群 Calico 网络。</p></li><li><p>Etcd：分布式键值存储，保存Calico的策略和网络配置状态。</p></li><li><p>calicoctl：命令行管理Calico。</p></li></ul><h2 id="k8s网络组件之calico-部署" tabindex="-1"><a class="header-anchor" href="#k8s网络组件之calico-部署"><span>K8s网络组件之Calico：部署</span></a></h2><p>Calico存储有两种方式：</p><ul><li>数据存储在etcd</li></ul><p>https://docs.projectcalico.org/v3.9/manifests/calico-etcd.yaml</p><ul><li>数据存储在Kubernetes API Datastore服务中</li></ul><p>https://docs.projectcalico.org/manifests/calico.yaml</p><p>数据存储在etcd中还需要修改yaml：</p><ul><li>配置连接etcd地址，如果使用https，还需要配置证书。（ConfigMap和Secret位置）</li></ul><p><img src="'+t+'" alt=""></p><p><img src="'+h+`" alt=""></p><p>根据实际网络规划修改Pod CIDR（CALICOIPV4POOLCIDR）（两种方式都需要修改）</p><p>部署：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># kubectl apply -f calico.yaml</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># kubectl get pods -n kube-system</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="k8s网络组件之calico-管理工具" tabindex="-1"><a class="header-anchor" href="#k8s网络组件之calico-管理工具"><span>K8s网络组件之Calico：管理工具</span></a></h2><p>calicoctl工具用于管理calico，可通过命令行读取、创建、更新和删除 Calico 的存储对象。</p><p>项目地址：https://github.com/projectcalico/calicoctl</p><p>calicoctl 在使用过程中，需要从配置文件中读取 Calico 对象存储地址等信息。默认配置文件路 径 /etc/calico/calicoctl.cfg</p><p>方式1（基于ectd存储）：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#使用calicoctl命令</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">chmod</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> +x</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> calicoctl</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mv</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /usr/bin/</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#配置calicoctl配置文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mkdir</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /etc/calico</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#vi /etc/calico/calicoctl.cfg</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">apiVersion:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> projectcalico.org/v3</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kind:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CalicoAPIConfig</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">metadata:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">spec:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  datastoreType:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">etcdv3</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  etcdEndpoints:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  &quot;https://192.168.0.11:2379,https://192.168.0.12:2379,https://192.168.0.13:2379&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  etcdKeyFile:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/opt/etcd/ssl/server-key.pem</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  etcdCertFile:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/opt/etcd/ssl/server.pem</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  etcdCACertFile:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/opt/etcd/ssl/ca.pem</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式2（基于kubernetes API Datastore存储）：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#配置calicoctl配置文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mkdir</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /etc/calico</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#vi /etc/calico/calicoctl.cfg</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">apiVersion:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> projectcalico.org/v3</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kind:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CalicoAPIConfig</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">metadata:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">spec:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  datastoreType:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">kubernetes</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     #数据存储类型</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  kubeconfig:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/root/.kube/config</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看Calico状态：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> node</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> status</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> node</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ippool</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> wide</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+'" alt=""></p><h2 id="k8s网络组件之calico-工作模式" tabindex="-1"><a class="header-anchor" href="#k8s网络组件之calico-工作模式"><span>K8s网络组件之Calico：工作模式</span></a></h2><p>Calico工作模式：</p><ul><li><p>IPIP：Overlay Network方案，源数据包封装在宿主机网络包里进行转发和通信。（默认）</p></li><li><p>BGP：基于路由转发，每个节点通过BGP协议同步路由表，写到宿主机。 （值设置Never）</p></li><li><p>CrossSubnet：同时支持BGP和IPIP，即根据子网选择转发方式。</p></li></ul><p>通过调整参数改变工作模式：</p><ul><li><p>name: CALICO_IPV4POOL_IPIP</p><p>value: &quot;Always&quot;</p></li></ul><h2 id="k8s网络组件之calico-ipip工作模式" tabindex="-1"><a class="header-anchor" href="#k8s网络组件之calico-ipip工作模式"><span>K8s网络组件之Calico：IPIP工作模式</span></a></h2><p>IPIP模式：采用Linux IPIP隧道技术实现的数据包封装与转发。</p><p>IP 隧道（IP tunneling）是将一个IP报文封装在另一个IP报文的技术，Linux系统内核实现的</p><p>IP隧道技术主要有三种：IPIP、GRE、SIT。</p><p><img src="'+d+`" alt=""></p><p>Pod 1 访问 Pod 2 大致流程如下：</p><ol><li><p>数据包（原始数据包）从容器出去到达宿主机，宿主机根据路由表发送到tunl0设备（IP隧道设备）</p></li><li><p>Linux内核IPIP驱动将原始数据包封装在宿主机网络的IP包中（新的IP包目的地之是原IP包的下一跳地 址，即192.168.31.63）。</p></li><li><p>数据包根据宿主机网络到达Node2；</p></li><li><p>Node2收到数据包后，使用IPIP驱动进行解包，从中拿到原始数据包；</p></li><li><p>然后根据路由规则，根据路由规则将数据包转发给cali设备，从而到达容器2。</p></li></ol><h2 id="k8s网络组件之calico-bgp工作模式" tabindex="-1"><a class="header-anchor" href="#k8s网络组件之calico-bgp工作模式"><span>K8s网络组件之Calico：BGP工作模式</span></a></h2><p>BGP模式：基于路由转发，每个节点通过BGP协议同步路由 表，将每个宿主机当做路由器，实现数据包转发。</p><p>calicoctl工具修改为BGP模式：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ippool</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> yaml</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ippool.yaml</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">vi</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ippool.yaml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apply</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ippool.yaml</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ippool</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> wide</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+c+'" alt=""></p><p><img src="'+o+'" alt=""></p><p>Pod 1 访问 Pod 2 大致流程如下：</p><ol><li><p>数据包从容器出去到达宿主机；</p></li><li><p>宿主机根据路由规则，将数据包转发给下一跳（网关）；</p></li><li><p>到达Node2，根据路由规则将数据包转发给cali设备，从而到达容器2。</p></li></ol><h2 id="k8s网络组件之calico-route-reflector-模式-rr" tabindex="-1"><a class="header-anchor" href="#k8s网络组件之calico-route-reflector-模式-rr"><span>K8s网络组件之Calico：Route Reflector 模式（RR）</span></a></h2><p>Calico 维护的网络在默认是（Node-to-Node Mesh）全互联模式，Calico集群中的节点之间都会相互建立连接，用于路由 交换。但是随着集群规模的扩大，mesh模式将形成一个巨大服务网格，连接数成倍增加，就会产生性能问题。</p><p>这时就需要使用 Route Reflector（路由器反射）模式解决这个问题。</p><p><img src="'+A+'" alt=""></p><p><img src="'+g+`" alt=""></p><p>确定一个或多个Calico节点充当路由反射器，集中分发路由，让其 他节点从这个RR节点获取路由信息。</p><p>具体步骤如下：</p><p>1、关闭 node-to-node模式</p><p>添加 default BGP配置，调整 nodeToNodeMeshEnabled和asNumber：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#ASN号可以通过获取</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> nodes</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --output=wide</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#vi bgpconfig.yaml</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">apiVersion:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> projectcalico.org/v3</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kind:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> BGPConfiguration</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">metadata:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  name:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> default</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">spec:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  logSeverityScreen:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Info</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  nodeToNodeMeshEnabled:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  asNumber:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 64512</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#应用配置</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apply</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bgpconfig.yaml</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bgpconfig</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、配置指定节点充当路由反射器</p><p>为方便让BGPPeer轻松选择节点，通过标签选择器匹配。 给路由器反射器节点打标签：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#kubectl label node k8s-node2 route-reflector=true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后配置路由器反射器节点routeReflectorClusterID</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#calicoctl get node k8s-node2 -o yaml &gt; rr-node.yaml</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#vi rr-node.yaml </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">apiVersion:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> projectcalico.org/v3</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kind:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Node</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">metadata:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  annotations:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    projectcalico.org/kube-labels:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">{&quot;beta.kubernetes.io/arch&quot;:&quot;amd64&quot;,&quot;beta.kubernetes.io/os&quot;:&quot;linux&quot;,&quot;kubernetes.io/arch&quot;:&quot;amd64&quot;,&quot;kubernetes.io/hostname&quot;:&quot;k8s-node2&quot;,&quot;kubernetes.io/os&quot;:&quot;linux&quot;,&quot;route-reflector&quot;:&quot;true&quot;}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  creationTimestamp:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 2021-03-08T03:28:34Z</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  labels:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    beta.kubernetes.io/arch:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> amd64</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    beta.kubernetes.io/os:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> linux</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    kubernetes.io/arch:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> amd64</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    kubernetes.io/hostname:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> k8s-node2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    kubernetes.io/os:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> linux</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    route-reflector:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  name:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> k8s-node2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  resourceVersion:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">53597</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  uid:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ffc15f57-d624-4003-a3bc-77cb78232f6a</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">spec:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  bgp:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    ipv4Address:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 192.168.1.13/24</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    routeReflectorClusterID:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 244.0.0.1</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 添加集群ID 要唯一</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#calicoctl apply -f rr-node.yaml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、使用标签选择器将路由反射器节点与其他非路由反射器节点配置为对等</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#vi bgppeer.yaml</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">apiVersion:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> projectcalico.org/v3</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kind:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> BGPPeer</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">metadata:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  name:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> peer-with-route-reflectors</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">spec:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  nodeSelector:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> all</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  peerSelector:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> route-reflector</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ==</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#calicoctl apply -f bgppeer.yaml </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#calicoctl node status   查看节点的BGP连接状态：</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#calicoctl get bgppeer</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#ss -anpt |grep EST |grep 179</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+`" alt=""></p><p>配置多个节点充当路由反射器</p><p>1.给路由器反射器节点打标签：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> label</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> node</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> k8s-node1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> route-reflector=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后配置路由器反射器节点routeReflectorClusterID：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> node</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> k8s-node1</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> yaml</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> rr-node.yaml</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#vi rr-node.yaml</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">apiVersion:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> projectcalico.org/v3</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kind:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Node</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">metadata:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  annotations:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    projectcalico.org/kube-labels:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">{&quot;beta.kubernetes.io/arch&quot;:&quot;amd64&quot;,&quot;beta.kubernetes.io/os&quot;:&quot;linux&quot;,&quot;kubernetes.io/arch&quot;:&quot;amd64&quot;,&quot;kubernetes.io/hostname&quot;:&quot;k8s-node1&quot;,&quot;kubernetes.io/os&quot;:&quot;linux&quot;,&quot;route-reflector&quot;:&quot;true&quot;}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  creationTimestamp:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 2021-03-08T03:28:33Z</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  labels:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    beta.kubernetes.io/arch:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> amd64</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    beta.kubernetes.io/os:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> linux</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    kubernetes.io/arch:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> amd64</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    kubernetes.io/hostname:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> k8s-node1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    kubernetes.io/os:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> linux</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    route-reflector:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">true</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  name:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> k8s-node1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  resourceVersion:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">60365</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  uid:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 47632c58-5dac-44d0-941d-abf772048cc4</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">spec:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  bgp:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    ipv4Address:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 192.168.1.12/24</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    routeReflectorClusterID:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 244.0.0.2</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 添加集群ID，要唯一</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># calicoctl apply -f rr-node.yam</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.重新应用bgppeer.yaml</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> delete</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bgppeer.yaml</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apply</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bgppeer.yaml</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">calicoctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> node</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> status</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+'" alt=""></p><p><img src="'+y+'" alt=""></p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p><img src="'+m+'" alt=""></p><p>网络性能：首选路由方案 flannel组件的hostGW和calico的BGP</p><p>集群规划：100+建议calico</p><p>网络限制：不能跑BGP</p><p>是否需要网络策略？</p><p>VXLAN和IPIP模式：</p><p>优势：只要你的集群节点之间互相能通信就行，不管你宿主机走的是二层还是三层。</p><p>缺点：先进行二层帧封装，再通过宿主机网络封装，解封装也一样，所以增加性能开销</p><p>HostGW和BGP模式：</p><p>优势：由于走的是宿主机网络路由，性能开销小</p><p>缺点：对宿主机网络要求二层可达，想要实现宿主机之前跨网段通信，需要同步宿主机路由信息到上层路由器。flannel需要手动同步，calico使用BGP动态路由发现协议自动同步，只要上层路由支持BGP协议。</p><h2 id="办公网络与k8s网络互通方案" tabindex="-1"><a class="header-anchor" href="#办公网络与k8s网络互通方案"><span>办公网络与K8s网络互通方案</span></a></h2><p>网络需求：</p><ul><li><p>办公网络与Pod网络不通。在微服务架构下，开发人员希望在办公电脑能 直接连接K8s中注册中心调试；</p></li><li><p>办公网络与Service网络不通。在测试环境运行的mysql、redis等需要通过 nodeport暴露，维护成本大；</p></li><li><p>现有虚拟机业务访问K8s上的业务。</p></li></ul><p>解决方案：打通办公网络与K8s网络</p><p><img src="'+b+'" alt=""></p><p>方案一：在办公室网络上层路由器添加一条静态路由条目，目标网段是容器网络（10.244.0.0）下一跳地址设置为某个node节点IP，从路由器的一个接口出，到达node节点上后，配置iptables规则源网段是办公室网段IP（192.168.0.0）转发到pod网段IP（10.244.0.0），还有源网段是办公室网段IP转发到service网段IP（10.96.0.0/12）。</p><p>方案二：服务器的上层核心交换机和k8s集群的上层路由反射器通过BGP协议相互学习对方的路由，从而实现路由的互通。</p><h2 id="网络策略概述" tabindex="-1"><a class="header-anchor" href="#网络策略概述"><span>网络策略概述</span></a></h2><p>网络策略（Network Policy），用于限制Pod出入流量，提供Pod级别和Namespace级别网络访问控制。 一些应用场景：</p><ul><li><p>应用程序间的访问控制。例如微服务A允许访问微服务B，微服务C不能访问微服务A</p></li><li><p>开发环境命名空间不能访问测试环境命名空间Pod</p></li><li><p>当Pod暴露到外部时，需要做Pod白名单</p></li><li><p>多租户网络环境隔离</p></li></ul><p>Pod网络入口方向隔离：</p><ul><li><p>基于Pod级网络隔离：只允许特定对象访问Pod（使用标签定义），允许白名单上的IP地址或者IP段访问Pod</p></li><li><p>基于Namespace级网络隔离：多个命名空间，A和B命名空间Pod完全隔离。</p></li></ul><p>Pod网络出口方向隔离：</p><ul><li><p>拒绝某个Namespace上所有Pod访问外部</p></li><li><p>基于目的IP的网络隔离：只允许Pod访问白名单上的IP地址或者IP段</p></li><li><p>基于目标端口的网络隔离：只允许Pod访问白名单上的端口</p></li></ul><p><img src="'+D+`" alt=""></p><p>podSelector：目标Pod，根据标签选择</p><p>policyTypes：策略类型，指定策略用于入站、出站流量。</p><p>Ingress：from是可以访问的白名单，可以来自于IP段、命名空间、 Pod标签等，ports是可以访问的端口。</p><p>Egress：这个Pod组可以访问外部的IP段和端口。</p><h2 id="案例-对项目pod出入流量访问控制" tabindex="-1"><a class="header-anchor" href="#案例-对项目pod出入流量访问控制"><span>案例：对项目Pod出入流量访问控制</span></a></h2><p>需求1：将default命名空间携带app=web标签的Pod隔离，只允 许default命名空间携带run=client1标签的Pod访问80端口。</p><p>准备测试环境：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> create</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> deployment</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> web</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --image=nginx</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> client1</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --image=busybox</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sleep</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 36000</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> client2</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --image=busybox</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sleep</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 36000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#vi np.yaml</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">apiVersion:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> networking.k8s.io/v1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kind:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> NetworkPolicy</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">metadata:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  name:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> test-network-policy</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  namespace:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> default</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">spec:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  podSelector:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    matchLabels:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      app:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> web</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  policyTypes:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Ingress</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  ingress:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> from:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> podSelector:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        matchLabels:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">          run:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> client1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    ports:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> protocol:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> TCP</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      port:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 80</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#kubectl apply -f np.yaml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证结果：client1pod可以下载web的首页，client2pod不可以下载web的首页</p><p>需求2：default命名空间下所有pod可以互相访问，也可以访问其 他命名空间Pod，但其他命名空间不能访问default命名空间Pod。</p><ul><li><p>podSelector: {}：如果未配置，默认所有Pod</p></li><li><p>from.podSelector: {} : 如果未配置，默认不允许</p></li></ul><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> client3</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --image=busybox</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -n</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> azhe</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> sleep</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 36000</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#vi np2.yaml </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">apiVersion:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> networking.k8s.io/v1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kind:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> NetworkPolicy</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">metadata:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  name:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> deny-from-other-namespaces</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  namespace:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> default</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">spec:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  podSelector:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  policyTypes:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Ingress</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  ingress:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> from:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> podSelector:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#kubectl apply -f np2.yaml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>验证结果：azhe命名空间下的client3pod不可以访问default命名空间下的pod，但default命名空间下的pod可以访问azhe命名空间下的pod。</p><h2 id="网络策略实现流程" tabindex="-1"><a class="header-anchor" href="#网络策略实现流程"><span>网络策略实现流程</span></a></h2><p><img src="`+C+'" alt=""></p><p>当我们创建一个网络策略，也就是apply 一个yaml文件，它会提交到apiserver，policy controller控制器（calico-kube-controllers）里面的进程会实时监听apiserver上的网络策略，拿到之后会通知它的agent（也就是运行在每个节点上calico pod（calico-node）来取我拿到的网络策略，然后在本地运行，calico-node利用iptables创建相应的网络规则。</p>',130)]))}const I=i(B,[["render",P],["__file","index.html.vue"]]),E=JSON.parse(`{"path":"/notes/k8s/e3olzjeh/","title":"k8s集群网络下","lang":"zh-CN","frontmatter":{"title":"k8s集群网络下","createTime":"2024/09/29 12:16:17","permalink":"/notes/k8s/e3olzjeh/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;const isDark = um === 'dark' || (um !== 'light' && sm);document.documentElement.dataset.theme = isDark ? 'dark' : 'light';})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"K8s网络组件之Calico","slug":"k8s网络组件之calico","link":"#k8s网络组件之calico","children":[]},{"level":2,"title":"K8s网络组件之Calico：BGP介绍","slug":"k8s网络组件之calico-bgp介绍","link":"#k8s网络组件之calico-bgp介绍","children":[]},{"level":2,"title":"K8s网络组件之Calico：部署","slug":"k8s网络组件之calico-部署","link":"#k8s网络组件之calico-部署","children":[]},{"level":2,"title":"K8s网络组件之Calico：管理工具","slug":"k8s网络组件之calico-管理工具","link":"#k8s网络组件之calico-管理工具","children":[]},{"level":2,"title":"K8s网络组件之Calico：工作模式","slug":"k8s网络组件之calico-工作模式","link":"#k8s网络组件之calico-工作模式","children":[]},{"level":2,"title":"K8s网络组件之Calico：IPIP工作模式","slug":"k8s网络组件之calico-ipip工作模式","link":"#k8s网络组件之calico-ipip工作模式","children":[]},{"level":2,"title":"K8s网络组件之Calico：BGP工作模式","slug":"k8s网络组件之calico-bgp工作模式","link":"#k8s网络组件之calico-bgp工作模式","children":[]},{"level":2,"title":"K8s网络组件之Calico：Route Reflector 模式（RR）","slug":"k8s网络组件之calico-route-reflector-模式-rr","link":"#k8s网络组件之calico-route-reflector-模式-rr","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":2,"title":"办公网络与K8s网络互通方案","slug":"办公网络与k8s网络互通方案","link":"#办公网络与k8s网络互通方案","children":[]},{"level":2,"title":"网络策略概述","slug":"网络策略概述","link":"#网络策略概述","children":[]},{"level":2,"title":"案例：对项目Pod出入流量访问控制","slug":"案例-对项目pod出入流量访问控制","link":"#案例-对项目pod出入流量访问控制","children":[]},{"level":2,"title":"网络策略实现流程","slug":"网络策略实现流程","link":"#网络策略实现流程","children":[]}],"readingTime":{"minutes":11.26,"words":3379},"filePathRelative":"notes/k8s/upgrade/6.k8s集群网络下.md"}`);export{I as comp,E as data};
