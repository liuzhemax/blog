import{_ as i,c as n,e,o as p}from"./app-D5peQ_E2.js";const s="/images/E636CCF6CF2B42F1A101A9C61AC4878Fclipboard.png",a="/images/50EFC14312B844A28E30D709A9AE9BE7clipboard.png",t="/images/ADF327DE95DB4C5084D0F3FCAFD2C253clipboard.png",r="/images/26D0547A8B474E39B4D5916D7FEF47F2clipboard.png",o="/images/CA8CDD48CDFC49049408825D2227E9FEclipboard.png",c="/images/949A3B8EAAB5429BB82ACE90062F3E35clipboard.png",d="/images/C9E89486F7CA4EE9BE204C905BF5AA73clipboard.png",h="/images/8F915E645EB54EEA98D52BE2042CFA1Eclipboard.png",k="/images/762CAE4691BD42B5A10116EF472228D1clipboard.png",m="/images/F247FFA929434234902653C0DADDF996clipboard.png",g="/images/78BFAAAF1E504AA1ADAC3BA1D40ED482clipboard.png",A="/images/CDCC5B1CD9DF416B8992A7AA90D5410Bclipboard.png",u="/images/DF7FE5B950AA4556867A3EFE53782999clipboard.png",P="/images/943B2A691FFD4AA68C1ED405E264A507clipboard.png",D="/images/589E4F3D29B9452F8BB2ABA112DF9C1Aclipboard.png",b="/images/C067F3160882498A90BC1C6B50FEEE54clipboard.png",f="/images/E1CC9578BB0D46389B0E1BA236732BA1clipboard.png",C="/images/D9885550172242E19DB576B68EE98223clipboard.png",F="/images/7ED7AC6E90B8450DBD7D700ED9B7E23Bclipboard.png",E="/images/7A61D71570864075886347EE1BE20CABclipboard.png",B="/images/F5367A99B1774053B1DC2D1B5E6635D4clipboard.png",v="/images/259307CC1DDA432BB2E44D87AC13D024clipboard.png",_="/images/D0F71BED5D54494D81D9FA3BDEDB6702clipboard.png",N="/images/11FFDE2820754EC0AC00FF78C33FF2DDclipboard.png",I={};function L(x,l){return p(),n("div",null,l[0]||(l[0]=[e('<h2 id="服务器网络架构" tabindex="-1"><a class="header-anchor" href="#服务器网络架构"><span>服务器网络架构</span></a></h2><p><img src="'+s+'" alt=""></p><ul><li><p>路由器：网络出口</p></li><li><p>核心层：主要完成数据高效转发、链路备份等</p></li><li><p>汇聚层：网络策略、安全、工作站交换机的接 入、VLAN之间通信等功能</p></li><li><p>接入层：工作站的接入</p></li></ul><h2 id="交换技术" tabindex="-1"><a class="header-anchor" href="#交换技术"><span>交换技术</span></a></h2><p><img src="'+a+'" alt=""></p><p>交换机工作在OSI参考模型的第二层，即数据链路层。交换机拥有一条高带宽的背部总线 交换矩阵，在同一时间可进行多个端口对之间的数据传输。</p><p>交换技术分为2层和3层：</p><ul><li><p>2层：主要用于小型局域网，仅支持在数据链路层转发数据，对工作站接入。</p></li><li><p>3层：三层交换技术诞生，最初是为了解决广播域的问题，多年发展，三层交换机已经 成为构建中大型网络的主要力量</p></li></ul><p>广播域</p><p>交换机在转发数据时会先进行广播，这个广播可以发送的区域就是一个广播域。交换机之间对广播帧是透明的，所以 交换机之间组成的网络是一个广播域。路由器的一个接口下的网络是一个广播域，所以路由器可以隔离广播域。</p><p>ARP（地址解析协议）</p><p>发送这个广播帧是由ARP协议实现，ARP是通过IP地址获取物理地址的一个TCP/IP协议。</p><p>三层交换机</p><p>前面讲的二层交换机只工作在数据链路层，路由器则工作在网络层。而功能强大的三层交换机可同时工作在数据链路 层和网络层，并根据 MAC地址或IP地址转发数据包。</p><p>VLAN（Virtual Local Area Network）：虚拟局域网</p><p>VLAN是一种将局域网设备从逻辑上划分成一个个网段。一个VLAN就是一个广播域，VLAN之间的通信是通过第3层 的路由器来完成的。VLAN应用非常广泛，基本上大部分网络项目都会划分vlan。</p><p>VLAN的主要好处：</p><ul><li><p>分割广播域，减少广播风暴影响范围。</p></li><li><p>提高网络安全性，根据不同的部门、用途、应用划分不同网段。</p></li></ul><h2 id="路由技术" tabindex="-1"><a class="header-anchor" href="#路由技术"><span>路由技术</span></a></h2><p>路由器主要分为两个端口类型：LAN口和WAN口</p><p>WAN口：配置公网IP，接入到互联网，转发来自LAN口的IP数据包。</p><p>LAN口：配置内网IP（网关），连接内部交换机。</p><p>路由器是连接两个或多个网络的硬件设备，将从端口上接收的数据包，根据数据包的 目的地址智能转发出去。</p><p>路由器的功能：</p><ul><li><p>路由</p></li><li><p>转发</p></li><li><p>隔离子网</p></li><li><p>隔离广播域</p></li></ul><p>路由器是互联网的枢纽，是连接互联网中各个局域网、广域网的设备，相比交换机来说，路由器的数据转发很复杂， 它会根据目的地址给出一条最优的路径。那么路径信息的来源有两种：</p><p>静态路由：指人工手动指定到目标主机的地址然后记录在路由表中，如果其中某个节点不可用则需要重新指定。</p><p>动态路由：则是路由器根据动态路由协议自动计算出路径永久可用，能实时地适应网络结构的变化。</p><p>常用的动态路由协议：</p><ul><li><p>RIP（ Routing Information Protocol ，路由信息协议）</p></li><li><p>OSPF（Open Shortest Path First，开放式最短路径优先）</p></li><li><p>BGP（Border Gateway Protocol，边界网关协议）</p></li></ul><h2 id="osi七层模型" tabindex="-1"><a class="header-anchor" href="#osi七层模型"><span>OSI七层模型</span></a></h2><p>OSI（Open System Interconnection）是国际标准化组织（ISO）制定的一个 用于计算机或通信系统间互联的标准体系，一般称为OSI参考模型或七层模型。</p><p><img src="'+t+'" alt=""></p><p><img src="'+r+'" alt=""></p><p>TCP（Transmission Control Protocol，传输控制协议），面向连接协议，双方先建立可靠的连接， 再发送数据。适用于传输数据量大，可靠性要求高的应用场景。</p><p>UDP（User Data Protocol，用户数据报协议），面向非连接协议，不与对方建立连接，直接将数 据包发送给对方。适用于一次只传输少量的数据，可靠性要求低的应用场景。相对TCP传输速度快。</p><h2 id="k8s网络模型-回看docker容器网络模型" tabindex="-1"><a class="header-anchor" href="#k8s网络模型-回看docker容器网络模型"><span>K8s网络模型： 回看Docker容器网络模型</span></a></h2><p><img src="'+o+'" alt=""></p><p>Docker网络模型涉及的名词：</p><ul><li><p>网络的命名空间：Linux在网络栈中引入网络命名空间，将独立的网络协议栈隔离到不同的命名空间中，彼此间无法通信； Docker利用这一特性，实现不同容器间的网络隔离。</p></li><li><p>Veth设备对：Veth设备对的引入是为了实现在不同网络命名空间的通信。</p></li><li><p>Iptables/Netfilter：Docker使用Netfilter实现容器网络转发。</p></li><li><p>网桥：网桥是一个二层网络设备，通过网桥可以将Linux支持的不同的端口连接起来，并实现类似交换机那样的多对多的通信。</p></li><li><p>路由：Linux系统包含一个完整的路由功能，当IP层在处理数据发送或转发的时候，会使用路由表来决定发往哪里。</p></li></ul><h2 id="k8s网络模型-pod网络" tabindex="-1"><a class="header-anchor" href="#k8s网络模型-pod网络"><span>K8s网络模型：Pod网络</span></a></h2><p><img src="'+c+'" alt=""></p><p>Pod是K8s最小调度单元，一个Pod由一个容器或多个容器组成，当多个容器时，怎么都用这一个Pod IP？</p><p>实现：k8s会在每个Pod里先启动一个infra container小容器，然后让其他的容器连接进来这个网络命名空间，然后其 他容器看到的网络试图就完全一样了。即网络设备、IP地址、Mac地址等。在Pod的IP地址就是infra container的IP地 址。</p><p>在 Kubernetes 中，每一个 Pod 都有一个真实的 IP 地址，并且每一个 Pod 都可以使用此 IP 地址与 其他 Pod 通信。</p><p>Pod之间通信会有两种情况：</p><ul><li><p>两个Pod在同一个Node上</p></li><li><p>两个Pod在不同Node上</p></li></ul><p>第一种情况：两个Pod在同一个Node上</p><p>同节点Pod之间通信道理与Docker网络一样的，如下图：</p><p><img src="'+d+'" alt=""></p><p>1.对 Pod1 来说，eth0 通过虚拟以太网设备 （veth0）连接到 root namespace；</p><p>2.网桥 cbr0 中为 veth0 配置了一个网段。一旦 数据包到达网桥，网桥使用ARP 协议解析出其 正确的目标网段 veth1；</p><p>3.网桥 cbr0 将数据包发送到 veth1；</p><p>4.数据包到达 veth1 时，被直接转发到 Pod2 的 network namespace 中的 eth0 网络设备。</p><p>第二种情况：两个Pod在不同Node上</p><p><img src="'+h+'" alt=""></p><p>相比同节点Pod通信，这里源Pod发出的数据包需 要传递到目标节点，但是源Pod并不知道目标Pod 在哪个节点上？</p><p>因此，为了实现容器跨主机通信需求，就需要部署网络组件，这些网络组件都必 须满足如下要求：</p><ul><li><p>一个Pod一个IP</p></li><li><p>所有的 Pod 可以与任何其他 Pod 直接通信</p></li><li><p>所有节点可以与所有 Pod 直接通信</p></li><li><p>Pod 内部获取到的 IP 地址与其他 Pod 或节点与其通信时的 IP 地址是同一个</p></li></ul><p>目前支持的一些K8s网络组件：</p><p><img src="'+k+'" alt=""></p><p>网络组件说明：https://kubernetes.io/docs/concepts/cluster-administration/networking/</p><h2 id="k8s网络模型-cni-容器网络接口" tabindex="-1"><a class="header-anchor" href="#k8s网络模型-cni-容器网络接口"><span>K8s网络模型： CNI（容器网络接口）</span></a></h2><p>CNI（Container Network Interface，容器网络接口)：是一个容器网络规范，Kubernetes网络采用的就是这个CNI规 范，负责初始化infra容器的网络设备。</p><p>CNI二进制程序默认路径：/opt/cni/bin/</p><p>项目地址：https://github.com/containernetworking/cni</p><p>以Flannel网络组件为例，当部署Flanneld后，会在每台宿主机上生成它对应的CNI配置文件（它其实是一个 ConfigMap），从而告诉Kubernetes要使用 Flannel 作为容器网络方案。</p><p>CNI配置文件默认路径：/etc/cni/net.d</p><p>当 kubelet 组件需要创建 Pod 的时候，先调用dockershim它先创建一个 Infra 容器。然后调用 CNI 插件为 Infra 容器 配置网络。</p><p>这两个路径可在kubelet启动参数中定义：</p><p>--network-plugin=cni</p><p>--cni-conf-dir=/etc/cni/net.d</p><p>--cni-bin-dir=/opt/cni/bin</p><h2 id="k8s网络组件之flannel" tabindex="-1"><a class="header-anchor" href="#k8s网络组件之flannel"><span>K8s网络组件之Flannel</span></a></h2><p>Flannel是CoreOS维护的一个网络组件，Flannel为每个Pod提供全局唯一的IP，Flannel使用ETCD来存储Pod子网与 Node IP之间的关系。flanneld守护进程在每台主机上运行，并负责维护ETCD信息和路由数据包。</p><p>项目地址：https://github.com/coreos/flannel</p><p>YAML地址：https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</p><h2 id="k8s网络组件之flannel-部署" tabindex="-1"><a class="header-anchor" href="#k8s网络组件之flannel-部署"><span>K8s网络组件之Flannel：部署</span></a></h2><p>部署前有两处可能需要调整：</p><p>kube-flannel.yml</p><p><img src="'+m+'" alt=""></p><p>Network：指定Pod IP分配的网段，与controller-manager配置的保持一样。</p><ul><li><p>--allocate-node-cidrs=true</p></li><li><p>--cluster-cidr=10.244.0.0/16</p></li><li><p>kubeadm部署：/etc/kubernetes/manifests/kube-controller-manager.yaml</p></li><li><p>二进制部署：/opt/kubernetes/cfg/kube-controller-manager.conf</p></li></ul><p>Backend：指定工作模式</p><h2 id="k8s网络组件之flannel-工作模式" tabindex="-1"><a class="header-anchor" href="#k8s网络组件之flannel-工作模式"><span>K8s网络组件之Flannel：工作模式</span></a></h2><p>Flannel支持多种工作模式：</p><ul><li><p>UDP：最早支持的一种方式，由于性能最差，目前已经弃用。</p></li><li><p>VXLAN：Overlay Network方案，源数据包封装在另一种网络包里面进行路由转发和通信</p></li><li><p>Host-GW：Flannel通过在各个节点上的Agent进程，将容器网络的路由信息写到主机的路由表上，这样一来所有 的主机都有整个容器网络的路由数据了。</p></li><li><p>Directrouting：同时支持VXLAN和Host-GW工作模式</p></li><li><p>公有云VPC：ALIYUN，AWS</p></li></ul><h2 id="k8s网络组件之flannel-vxlan模式" tabindex="-1"><a class="header-anchor" href="#k8s网络组件之flannel-vxlan模式"><span>K8s网络组件之Flannel：VXLAN模式</span></a></h2><p>VXLAN介绍</p><p>VXLAN，即 Virtual Extensible LAN（虚拟可扩展局域网），是 Linux 内核本身就支持的一种网络 虚似化技术。VXLAN 可以完全在内核态实现上述封装和解封装的工作，从而通过与前面相似的“隧 道”机制，构建出覆盖网络（Overlay Network）。</p><p>VXLAN的覆盖网络设计思想：在现有的三层网络之上，覆盖一个二层网络，使得连接在这个VXLAN 二层网络上的主机之间，可以像在同一局域网里通信。</p><p>为了能够在二层网络上打通“隧道” ，VXLAN 会在宿主机上设置一个特殊的网络设备作为“隧道” 的两端。这个设备就叫作 VTEP，即：VXLAN Tunnel End Point（虚拟隧道端点）。</p><p>VTEP设备进行封装和解封装的对象是二层数据帧，这个工作是在Linux内核中完成的。</p><p>Flannel工作逻辑图如下：</p><p><img src="'+g+'" alt=""></p><p>如果Pod 1访问Pod 2，源地址10.244.1.10，目的地址10.244.2.10 ，数据包传输流程如下：</p><p>1.容器路由：容器根据路由表，将数据包发送下一跳10.244.1.1，从eth0网卡出。可以使用ip route命令查看路由表</p><p><img src="'+A+'" alt=""></p><p>2.主机路由：数据包进入到宿主机虚拟网卡cni0，根据路由表转发到flannel.1虚拟网卡，也就是来到了隧道的入口。 10.244.2.0/24 via 10.244.2.0 dev flannel.1 onlink # 凡是发往10.244.2.0/24网段的数据包，都需要经过flannel.1设备发出，并且下一跳是10.244.2.0， 即Node2 VTEP设备flannel.1。</p><p><img src="'+u+'" alt=""></p><p><img src="'+P+'" alt=""></p><p>3.VXLAN封装：而这些VTEP设备之间组成一个二层网络，但是二层网络必须要知道目的MAC地址，那这个MAC地址从哪获取到呢？其实在flanneld进 程启动后，就会自动添加其他节点ARP记录，可以通过ip neigh show dev flannel.1命令查看。</p><p><img src="'+D+'" alt=""></p><p>4.二次封包：知道了目的MAC地址，Linux内核就可以进行二层封包了。但是，对于宿主机网络来说这个二层帧并不能在宿主机二层网络里传输。所以接 下来，Linux内核还要把这个数据帧进一步封装成为宿主机网络的一个普通数据帧，好让它载着内部数据帧，通过宿主机的ens33网卡进行传输。 数据格式如下图：</p><p><img src="'+b+'" alt=""></p><p>5.封装到UDP包发出去：在封装成宿主机网络可传输的数据帧时，还缺少目标宿主机MAC地址，也就是说这个UDP包该发给哪台宿主机呢？ flanneld进程也维护着一个叫做FDB的转发数据库，可以通过bridge fdb show dev flannel.1命令查看。可以看到，上面用的对方flannel.1的MAC地址 对应宿主机IP，也就是UDP要发往的目的地。所以使用这个目的IP与MAC地址进行封装。</p><p><img src="'+f+`" alt=""></p><p>6.数据包到达目的宿主机：接下来，就是宿主机与宿主机之间通信了，数据包从Node1的ens33网卡发出去，Node2接收到数据包，解封装发现是VXLAN 数据包，把它交给flannel.1设备。flannel.1设备则会进一步拆包，取出原始IP包（源容器IP和目标容器IP），通过cni0网桥二层转发给容器。</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#抓包分析</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tcpdump</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -i</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> flannel.1</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -nn</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #-i 的作用是指定监听哪个网卡</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tcpdump</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> udp</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">  -i</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ens33</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -nn</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   #-nn 不进行端口名称的转换</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tcpdump抓包指南之关键字的使用</p><p>1.类型关键字：  host，net，port</p><p>2.传输关键字：src，dst</p><p>3.协议关键字：tcp,udp,http,arp,ftp</p><p><img src="`+C+'" alt=""></p><h2 id="k8s网络组件之flannel-host-gw模式" tabindex="-1"><a class="header-anchor" href="#k8s网络组件之flannel-host-gw模式"><span>K8s网络组件之Flannel：HOST-GW模式</span></a></h2><p>host-gw模式相比vxlan简单了许多，直接添加路由，将目的主机当做网关，直接路由原始封包。</p><p><img src="'+F+'" alt=""></p><p>修改配置文件：</p><p>kube-flannel.yml</p><p><img src="'+E+'" alt=""></p><p>当你设置flannel使用host-gw模式，flanneld会在宿主机上创建节点的路由表：</p><p><img src="'+B+'" alt=""></p><p>目的 IP 地址属于 10.244.2.0/24 网段的 IP 包，应该经过本机的 eth33 设备发出去（即：dev ens33）；并且，它下一跳地址是 192.168.0.13（即：via 192.168.0.13）。</p><p>一旦配置了下一跳地址，那么接下来，当 IP 包从网络层进入链路层封装成帧的时候，ens33 设备就会使用下一跳地址对应的 MAC 地址，作为该数据帧的目的 MAC 地址。</p><p><img src="'+v+'" alt=""></p><p>而 Node 2 的内核网络栈从二层数据帧里拿到 IP 包后，会“看到”这个 IP 包的目的 IP 地址是 10.244.2.10，即 container-2 的 IP 地址。这时候，根据 Node 2 上的路由表，该目的地址会匹配到第五条路由规则（也就是 10.244.2.0 对应的路由规则），从而 进入 cni0 网桥，进而进入到 container-2 当中。</p><p><img src="'+_+`" alt=""></p><p>可见，数据包是封装成帧发送出去的，会使用路由表的下一跳来设置目的MAC地址，会经过二层网络到达目的节点，因此，hostgw模式必须要求集群宿主机之间二层连通。</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#抓包分析</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tracepath</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10.244.1.3</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tcpdump</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -i</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ens33</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -nn</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dst</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10.244.2.4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+N+'" alt=""></p><h2 id="k8s网络组件之flannel-小结" tabindex="-1"><a class="header-anchor" href="#k8s网络组件之flannel-小结"><span>K8s网络组件之Flannel：小结</span></a></h2><p>VXLAN特点：</p><ul><li><p>先进行二层帧封装，再通过宿主机网络封装，解封装也一样，所以增加性能开销</p></li><li><p>对宿主机网络要求低，只要三层网络可达</p></li></ul><p>Host-GW特点：</p><ul><li><p>直接路由转发，性能损失很小</p></li><li><p>对宿主机网络要求二层可达</p></li></ul><p>卸载flnnel</p><p>https://blog.csdn.net/weixin_34409741/article/details/92513036</p><p>学习：https://edu.51cto.com/center/course/lesson/index?id=532871</p>',138)]))}const V=i(I,[["render",L],["__file","index.html.vue"]]),w=JSON.parse(`{"path":"/notes/k8s/e7q1cuv0/","title":"k8s集群网络上","lang":"zh-CN","frontmatter":{"title":"k8s集群网络上","createTime":"2024/09/29 12:16:12","permalink":"/notes/k8s/e7q1cuv0/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;const isDark = um === 'dark' || (um !== 'light' && sm);document.documentElement.dataset.theme = isDark ? 'dark' : 'light';})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"服务器网络架构","slug":"服务器网络架构","link":"#服务器网络架构","children":[]},{"level":2,"title":"交换技术","slug":"交换技术","link":"#交换技术","children":[]},{"level":2,"title":"路由技术","slug":"路由技术","link":"#路由技术","children":[]},{"level":2,"title":"OSI七层模型","slug":"osi七层模型","link":"#osi七层模型","children":[]},{"level":2,"title":"K8s网络模型： 回看Docker容器网络模型","slug":"k8s网络模型-回看docker容器网络模型","link":"#k8s网络模型-回看docker容器网络模型","children":[]},{"level":2,"title":"K8s网络模型：Pod网络","slug":"k8s网络模型-pod网络","link":"#k8s网络模型-pod网络","children":[]},{"level":2,"title":"K8s网络模型： CNI（容器网络接口）","slug":"k8s网络模型-cni-容器网络接口","link":"#k8s网络模型-cni-容器网络接口","children":[]},{"level":2,"title":"K8s网络组件之Flannel","slug":"k8s网络组件之flannel","link":"#k8s网络组件之flannel","children":[]},{"level":2,"title":"K8s网络组件之Flannel：部署","slug":"k8s网络组件之flannel-部署","link":"#k8s网络组件之flannel-部署","children":[]},{"level":2,"title":"K8s网络组件之Flannel：工作模式","slug":"k8s网络组件之flannel-工作模式","link":"#k8s网络组件之flannel-工作模式","children":[]},{"level":2,"title":"K8s网络组件之Flannel：VXLAN模式","slug":"k8s网络组件之flannel-vxlan模式","link":"#k8s网络组件之flannel-vxlan模式","children":[]},{"level":2,"title":"K8s网络组件之Flannel：HOST-GW模式","slug":"k8s网络组件之flannel-host-gw模式","link":"#k8s网络组件之flannel-host-gw模式","children":[]},{"level":2,"title":"K8s网络组件之Flannel：小结","slug":"k8s网络组件之flannel-小结","link":"#k8s网络组件之flannel-小结","children":[]}],"readingTime":{"minutes":12.45,"words":3735},"filePathRelative":"notes/k8s/upgrade/5.k8s集群网络上.md"}`);export{V as comp,w as data};
