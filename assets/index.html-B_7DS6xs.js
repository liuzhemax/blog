import{_ as s,c as i,e as a,o as t}from"./app-D5peQ_E2.js";const l="/images/5697E485CBF7456196AC73ACF927AD53clipboard.png",n="/images/178CD64315B147FE8DFA848EE58D6A16clipboard.png",p="/images/10DF204762EB4FA98E55BE5475C18BADclipboard.png",r={};function d(c,e){return t(),i("div",null,e[0]||(e[0]=[a('<h2 id="vue介绍" tabindex="-1"><a class="header-anchor" href="#vue介绍"><span>Vue介绍</span></a></h2><p>Vue.js（简称Vue） 是一套用于构建用户界面的渐进式前端框架。</p><p>Vue.js 核心实现：</p><ul><li><p>响应式的数据绑定：当数据发生改变，视图可以自动更新，不用关心 DOM操作，而专心数据操作。</p></li><li><p>可组合的视图组件：把视图按照功能切分成若干基本单元，可维护，可重 用，可测试等特点。</p></li></ul><p>官网：https://v3.cn.vuejs.org/</p><h2 id="引入vue" tabindex="-1"><a class="header-anchor" href="#引入vue"><span>引入Vue</span></a></h2><p>使用Vue的四种方式：</p><ul><li><p>在HTML中以CDN包的形式导入</p></li><li><p>下载JS文件保存到本地再导入</p></li><li><p>使用npm安装</p></li><li><p>使用官方VueCli脚手架构建项目（不建议新手直接用）</p></li></ul><p>参考文档：https://v3.cn.vuejs.org/guide/installation.html</p><p>从一个Hello World例子开始：</p><p><img src="'+l+'" alt=""></p><h2 id="声明式渲染" tabindex="-1"><a class="header-anchor" href="#声明式渲染"><span>声明式渲染</span></a></h2><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进DOM 的系统：</p><p><img src="'+n+'" alt=""></p><p>现在数据和DOM已经被建立了关联，所有东西都是响应式的，可通过下面示例确认：</p><p><img src="'+p+`" alt=""></p><h2 id="模板语法" tabindex="-1"><a class="header-anchor" href="#模板语法"><span>模板语法</span></a></h2><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将DOM 绑定至底层组件实例 的数据。所有Vue.js 的模板都是合法的HTML，所以能被遵循规范的浏览器和HTML 解 析器解析。</p><p>数据绑定最常见的形式就是使用&quot;双大括号&quot;语法在HTML中插入文本：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Message: {{ msg }}</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">{{msg}}将被替代对应组件实例中msg属性的值。无论何时，绑定的组件实例上msg属性发 生改变，插值处内容都会更新。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20)]))}const o=s(r,[["render",d],["__file","index.html.vue"]]),u=JSON.parse(`{"path":"/notes/web/cp63abe0/","title":"认识vue.js","lang":"zh-CN","frontmatter":{"title":"认识vue.js","createTime":"2024/09/29 14:46:56","permalink":"/notes/web/cp63abe0/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;const isDark = um === 'dark' || (um !== 'light' && sm);document.documentElement.dataset.theme = isDark ? 'dark' : 'light';})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"Vue介绍","slug":"vue介绍","link":"#vue介绍","children":[]},{"level":2,"title":"引入Vue","slug":"引入vue","link":"#引入vue","children":[]},{"level":2,"title":"声明式渲染","slug":"声明式渲染","link":"#声明式渲染","children":[]},{"level":2,"title":"模板语法","slug":"模板语法","link":"#模板语法","children":[]}],"readingTime":{"minutes":1.38,"words":415},"filePathRelative":"notes/web/upgrade/1.认识vue.js.md"}`);export{o as comp,u as data};
