import{_ as i,c as e,e as a,o as t}from"./app-D5peQ_E2.js";const n="/images/5F730C9479B54B699DE474EF4B7A7F9Eclipboard.png",l="/images/38591824AEDF4276B3BD2D674D39FBB9clipboard.png",p="/images/055C10B8FB2D4C37B0F5C228101816EEclipboard.png",r="/images/AE19C6C41C1541D2A94E0851181D87E7clipboard.png",o="/images/68112A71FF9C4BEDB13B77FBDE6FC3F3clipboard.png",c="/images/EB87EA8B640A43B4B3EA8010C8649FF3clipboard.png",h="/images/FE9D80B96FCB40C8AAF62852599DD9AAclipboard.png",d={};function m(v,s){return t(),e("div",null,s[0]||(s[0]=[a('<h2 id="v-if" tabindex="-1"><a class="header-anchor" href="#v-if"><span>v-if</span></a></h2><p><img src="'+n+`" alt=""></p><p>这里，v-if 指令将根据表达式seen 的值的真假来插入/移除元素。</p><p>v-if指令必须将它添加到一个元素上。如果想切换多个元素呢？</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">示例：</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">添加一个else块此时可以把一个&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&quot;元素当做不可见的包裹元素，并在上面使用v-if。</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">最终的渲染结果将不包含</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">元素。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+l+'" alt=""></p><p>v-else-fi多分支：</p><p><img src="'+p+'" alt=""></p><h2 id="v-show" tabindex="-1"><a class="header-anchor" href="#v-show"><span>v-show</span></a></h2><p>v-show：另一个用于条件性展示元素的指令，与v-if不同的是，v-show的元素始终会被渲 染并保留再DOM中，所以v-show只是简单地切换元素的display CSS属性。</p><p><img src="'+r+'" alt=""></p><h2 id="v-for" tabindex="-1"><a class="header-anchor" href="#v-for"><span>v-for</span></a></h2><p>可以用v-for 指令基于一个数组来渲染一个列表。v-for 指令需要使用item in items 形式 的特殊语法，其中items 是源数据数组，而item 则是被迭代的数组元素的别名。</p><p><img src="'+o+'" alt=""></p><p>当Vue 正在更新使用v-for 渲染的元素列表时，它默认使用“就地更新”的策略。如果数 据项的顺序被改变，Vue 将不会移动DOM 元素来匹配数据项的顺序，而是就地更新每个 元素，并且确保它们在每个索引位置正确渲染。</p><p>为了给Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你 需要为每项提供一个唯一的key 属性：</p><p><img src="'+c+'" alt=""></p><p>获取用户选择并赋值另一个变量再实时展示：</p><p><img src="'+h+'" alt=""></p>',19)]))}const g=i(d,[["render",m],["__file","index.html.vue"]]),u=JSON.parse(`{"path":"/notes/web/hh6ubxcn/","title":"vue常用指令之流程控制","lang":"zh-CN","frontmatter":{"title":"vue常用指令之流程控制","createTime":"2024/09/29 14:47:50","permalink":"/notes/web/hh6ubxcn/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;const isDark = um === 'dark' || (um !== 'light' && sm);document.documentElement.dataset.theme = isDark ? 'dark' : 'light';})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"v-if","slug":"v-if","link":"#v-if","children":[]},{"level":2,"title":"v-show","slug":"v-show","link":"#v-show","children":[]},{"level":2,"title":"v-for","slug":"v-for","link":"#v-for","children":[]}],"readingTime":{"minutes":1.39,"words":416},"filePathRelative":"notes/web/upgrade/4.vue常用指令之流程控制.md"}`);export{g as comp,u as data};
