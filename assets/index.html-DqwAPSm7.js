import{_ as a,c as i,e as s,o as t}from"./app-D5peQ_E2.js";const p="/images/60F13B5F05F04C7F8B585A834F73FF1Fclipboard.png",l="/images/C7D4536D45F84F44B8141C51E8C70EA4clipboard.png",n="/images/C5D1B21B60C641C2A504542E9DB34E57clipboard.png",r="/images/1AE67C4EBD754254AB6A704335FA93D1clipboard.png",c="/images/800323776846408DA8CD53C7B128D45Cclipboard.png",o="/images/DC172FED78C2492385CBAEFDEE720E79clipboard.png",d="/images/A906B59FC1FA4D6282D7E4AC3A9A62EBclipboard.png",m="/images/89FDA87EC5FF41F6931FA012C82392A2clipboard.png",h={};function g(u,e){return t(),i("div",null,e[0]||(e[0]=[s('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>在前端页面展示的数据大多数都是通过访问一个API获取的，做这件事的方法有好几种，例如 jquery ajax、vue-resource、axios，而vue-resource是vue插件，但3版本不再更新，目前官方 推荐主流的axios，aixos是一个http请求库。</p><p>官方文档：http://www.axios-js.com/zh-cn/docs/</p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><p>使用流程：</p><p>1、安装axios：npm install axios</p><p>2、在main.js文件中全局注册</p><p>3、在组件中使用</p><p><img src="'+p+'" alt=""></p><p>如果打开页面就自动渲染，可以放到mounted生命周期钩子 中获取数据并赋值：</p><p><img src="'+l+'" alt=""></p><p><img src="'+n+'" alt=""></p><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h2><p>很多时候我们可能并没有从API 获取想要的数据。这可能是由于很多种因素引起的，比如axios 调用可能由于多种原因而失败，包括但不限于：</p><ul><li><p>API 不工作了；</p></li><li><p>请求发错了；</p></li><li><p>API 没有按我们预期的格式返回信息。</p></li></ul><p>可以使用catch异常处理这些问题。</p><p>模拟连接一个未存在的地址，前端给出提示：</p><p><img src="'+r+'" alt=""></p><h2 id="全局默认值" tabindex="-1"><a class="header-anchor" href="#全局默认值"><span>全局默认值</span></a></h2><p>在实际开发中，几乎每个组件都会用到axios发起数据请求，如果每次都填写完整的请求路径，不 利于后期维护。这时可以设置全局axios默认值。</p><p><img src="'+c+'" alt=""></p><h2 id="自定义实例默认值" tabindex="-1"><a class="header-anchor" href="#自定义实例默认值"><span>自定义实例默认值</span></a></h2><p>有时候服务端接口有多个地址，就会涉及请求的域名不同、配置不同等，这时自定义实例可以很好解决。</p><p><img src="'+o+'" alt=""></p><h2 id="拦截器" tabindex="-1"><a class="header-anchor" href="#拦截器"><span>拦截器</span></a></h2><p>拦截器可以拦截每一次请求和响应，然后进行相应的处理。</p><p>请求拦截应用场景：</p><ul><li><p>发起请求前添加header 响应拦截应用场景：</p></li><li><p>统一处理API响应状态码200或非200的提示消息</p></li><li><p>统一处理catch异常提示信息</p></li></ul><p><img src="'+d+'" alt=""></p><p><img src="'+m+'" alt=""></p>',30)]))}const x=a(h,[["render",g],["__file","index.html.vue"]]),A=JSON.parse(`{"path":"/notes/web/2wmwjyab/","title":"前后端数据交互axios","lang":"zh-CN","frontmatter":{"title":"前后端数据交互axios","createTime":"2024/09/29 14:48:32","permalink":"/notes/web/2wmwjyab/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;const isDark = um === 'dark' || (um !== 'light' && sm);document.documentElement.dataset.theme = isDark ? 'dark' : 'light';})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":2,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[]},{"level":2,"title":"全局默认值","slug":"全局默认值","link":"#全局默认值","children":[]},{"level":2,"title":"自定义实例默认值","slug":"自定义实例默认值","link":"#自定义实例默认值","children":[]},{"level":2,"title":"拦截器","slug":"拦截器","link":"#拦截器","children":[]}],"readingTime":{"minutes":1.59,"words":478},"filePathRelative":"notes/web/upgrade/9.前后端数据交互axios.md"}`);export{x as comp,A as data};
