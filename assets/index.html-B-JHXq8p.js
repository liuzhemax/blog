import{_ as i,c as a,e,o as p}from"./app-D5peQ_E2.js";const t="/images/F21DC0DDBB424F56BDC14662618B9C38clipboard.png",l="/images/C9327FF100D04729949477E00A06AAD1clipboard.png",n="/images/CB37F38D79B4478592BAB8082A901C85clipboard.png",h="/images/1522D5007F7E4955BC7422BF8F09CC12clipboard.png",r="/images/E15162D15C514E0A8516A054B5D8614Dclipboard.png",d="/images/AB47C72AF5AD4E36B0174290E3E5774Eclipboard.png",k="/images/EC271154665E410597D86C5AFF220467clipboard.png",c="/images/A358E18EACEB48D0B0545651A2E28D10clipboard.png",o="/images/47C885B18F104181AFBD020D39899A07clipboard.png",m={};function g(u,s){return p(),a("div",null,s[0]||(s[0]=[e('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>组件：一段独立的，能代表页面某一个部分的代码片段，拥有自己独立的数据、JavaScript脚本、 以及CSS样式。</p><p>组件是可复用的Vue实例，在开发过程中可以把经常重复的功能，封装为组件，达到快捷开发的 目的。</p><p>组件的好处：</p><ul><li><p>提高开发效率</p></li><li><p>方便重复使用</p></li><li><p>易于管理和维护</p></li></ul><p>通常一个应用会以一棵嵌套的组件树的形式来组织，如图所 示。</p><p>例如，你可能会有页头、侧边栏、内容区等组件，每个组件 又包含了其它的像导航链接、博文之类的组件。</p><p><img src="'+t+`" alt=""></p><h2 id="文件格式" tabindex="-1"><a class="header-anchor" href="#文件格式"><span>文件格式</span></a></h2><p>Vue单文件组件（又名*.vue文件，缩写为SFC）是一种特殊的文件格式，它允许讲Vue组件的模板、逻辑与样式封装在单个文件中。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">正如所见，Vue SFC 是经典的HTML、CSS 与JavaScript 三个经典组合的自然延伸。每个*.vue 文件由三种类型的顶层代码块组成：</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">、</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 与 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">style</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 部分定义了组件的模板。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 部分是一个标准的</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">JavaScript</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 模块。它应该导出一个</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Vue</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 组件定义作为其默认导出。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">style</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 部分定义了与此组件关联的</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">CSS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+l+'" alt=""></p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><p>使用具体流程：</p><p>1、在src/components目录里开发一个组件文件（首字母大写）</p><p>2、在父组件里引用子组件import xxx from‘xxx’</p><p>3、在默认导出里注册组件</p><p>4、在template模板里使用组件</p><p><img src="'+n+'" alt=""></p><h2 id="注册" tabindex="-1"><a class="header-anchor" href="#注册"><span>注册</span></a></h2><p>为了能在模板中使用，这些组件必须先注册以便 Vue 能够识别。这里有两种组件的注册类 型：全局注册和局部注册。上述是局部注册，只能在当前模板中使用。</p><ul><li><p>全局注册：声明一次，在任何vue文件模板中使用，一般使用该组件的地方多时使用</p></li><li><p>局部注册：在使用组件的vue文件中声明和使用，一般只需要解耦代码时使用</p></li></ul><p>全局注册：在main.js文件</p><p><img src="'+h+'" alt=""></p><p>全局注册后，在任意.vue文件里可使用该组件： views/Home.vue</p><p><img src="'+r+'" alt=""></p><h2 id="传参" tabindex="-1"><a class="header-anchor" href="#传参"><span>传参</span></a></h2><p>学习了组件用法，就像一种嵌套引用关系，在这个关系中，经常会涉及相互传数据的需 求，即父组件传子组件，子组件传父组件。</p><p>父、子组件的关系可以总结为：prop 向下传递，事件向上传递。</p><p>父组件通过prop 给子组件下发数据，子组件通过事件给父组件发送消息，如右图所示：</p><p><img src="'+d+'" alt=""></p><p>父传子：在默认页面中，也用到了父传子，在父组件Home.vue中给引用 的组件传入一个静态的值，子组件通过props属性接收，并在模板中使用。</p><p><img src="'+k+'" alt=""></p><p>也可以通过v-bind或者简写：动态赋值，例如：</p><p><img src="'+c+'" alt=""></p><p>子传父：</p><p><img src="'+o+'" alt=""></p>',37)]))}const B=i(m,[["render",g],["__file","index.html.vue"]]),v=JSON.parse(`{"path":"/notes/web/4rs3rki7/","title":"vue组件","lang":"zh-CN","frontmatter":{"title":"vue组件","createTime":"2024/09/29 14:48:25","permalink":"/notes/web/4rs3rki7/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;const isDark = um === 'dark' || (um !== 'light' && sm);document.documentElement.dataset.theme = isDark ? 'dark' : 'light';})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"文件格式","slug":"文件格式","link":"#文件格式","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":2,"title":"注册","slug":"注册","link":"#注册","children":[]},{"level":2,"title":"传参","slug":"传参","link":"#传参","children":[]}],"readingTime":{"minutes":2.5,"words":750},"filePathRelative":"notes/web/upgrade/8.vue组件.md"}`);export{B as comp,v as data};
