import{_ as i,c as e,e as a,o as n}from"./app-D5peQ_E2.js";const t="/images/BB1A0303527447A88DC9326D3AA0D49Cclipboard.png",l="/images/30B60E47CD814092B76494C3BDB798ECclipboard.png",p="/images/CB1FCD583CEB442281E88BE448982FA2clipboard.png",h="/images/FFFAEE57CF3F44C6A1C5F7212C52C438clipboard.png",r="/images/FF9E2B69D83F4F0FB47B6300C49E24A6clipboard.png",d="/images/16117269F4D44E79A1418F0E78971E2Fclipboard.png",k="/images/D5F24F5FED2A423F996908F125DED50Aclipboard.png",c="/images/60E86E6523694505B69AF566B7F07302clipboard.png",o="/images/9718B972CAF34241AD0F965085648A7Eclipboard.png",u="/images/642AB396EAB54FB7B1354114EAF2EC5Bclipboard.png",A="/images/029910BC61E7421F83E9C9FC86A91439clipboard.png",g="/images/975D6546371D43BF9540211C04A9F1EEclipboard.png",m="/images/4354F6CA800D467C96B6FE51DF0EA02Cclipboard.png",b="/images/076AE4A02CD644FE8C97441AA06AFE02clipboard.png",v="/images/FCA892D84C824901A612C96B7D44F38Aclipboard.png",y="/images/2BA1364BE5C14304AE57EE4F4F29D42Cclipboard.png",C="/images/9A74475680A24C1C995BEFA1F54AE871clipboard.png",B="/images/27BB787CAD964355930CCEE95858D3ADclipboard.png",D="/images/46A280BD5F6D4A5C9E2F14B0BC21A847clipboard.png",E="/images/06B921886DCB4A22AA557A870DDE2C52clipboard.png",P="/images/288324F062F64096A5BFA295B30E2468clipboard.png",_="/images/00740B593E1C42479ADA61F0D40FE0D5clipboard.png",F="/images/7870750D339B47298292D035876488DFclipboard.png",x="/images/7F9CDC8EA0524B878823B38929B98518clipboard.png",f="/images/DB3C8D8A632D42498A58BFF087C23C93clipboard.png",q="/images/5FFECCEDFB4849D69DBC010EBCD3C5B6clipboard.png",H="/images/65CA2980E64B4AAAA8068141195E0F98clipboard.png",N="/images/B0473BE0FE72441380AB7ED8F85B7C8Eclipboard.png",I={};function w(M,s){return n(),e("div",null,s[0]||(s[0]=[a('<h2 id="弹性伸缩概述" tabindex="-1"><a class="header-anchor" href="#弹性伸缩概述"><span>弹性伸缩概述</span></a></h2><p>从传统意义上，弹性伸缩主要解决的问题是容量规划与实际负载的矛盾。</p><p>蓝色水位线表示集群资源容量随着负载的增加不断扩容，红色曲线表示集群资源实际负载变化。</p><p>弹性伸缩就是要解决当实际负载增大，而集群资源容量没来得及反应的问题。</p><p><img src="'+t+'" alt=""></p><h2 id="kubernetes弹性伸缩布局" tabindex="-1"><a class="header-anchor" href="#kubernetes弹性伸缩布局"><span>Kubernetes弹性伸缩布局</span></a></h2><p>在Kubernetes平台中，资源分为两个维度：</p><ul><li><p>Node级别：K8s将多台服务器抽象一个集群资源池，每个Node提供这些资源</p></li><li><p>Pod级别：Pod是K8s最小部署单元，运行实际的应用程序，使用request和limit为Pod配额</p></li></ul><p>因此，K8s实现弹性伸缩也是这两个级别，当Node资源充裕情况下，Pod可任意弹性，当不足情况下需要弹性增加节 点来扩容资源池。</p><p>针对Pod负载：当Pod资源不足时，使用HPA（Horizontal Pod Autoscaler）自动增加Pod副本数量</p><p>针对Node负载：当集群资源池不足时，使用CA（Cluster Autoscaler）自动增加Node</p><h2 id="node自动扩容-缩容" tabindex="-1"><a class="header-anchor" href="#node自动扩容-缩容"><span>Node自动扩容/缩容</span></a></h2><p>Node弹性伸缩有两种方案：</p><ul><li>Cluster Autoscaler：是一个自动调整Kubernetes集群大小的组件，需要与公有云一起使用，例如AWS、Azure、Aliyun</li></ul><p>项目地址： https://github.com/kubernetes/autoscaler</p><ul><li>自研发：根据Node监控指标或者Pod调度状态判断是否增加Node，需要一定开发成本</li></ul><h2 id="node自动扩容-缩容-实现思路" tabindex="-1"><a class="header-anchor" href="#node自动扩容-缩容-实现思路"><span>Node自动扩容/缩容：实现思路</span></a></h2><p><img src="'+l+'" alt=""></p><h2 id="node自动扩容-缩容-cluster-autoscaler" tabindex="-1"><a class="header-anchor" href="#node自动扩容-缩容-cluster-autoscaler"><span>Node自动扩容/缩容： Cluster Autoscaler</span></a></h2><p>Cluster Autoscaler支持的云提供商：</p><ul><li><p>阿里云：https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/alicloud/README.md</p></li><li><p>AWS：https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/aws/README.md</p></li><li><p>Azure：https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/azure/README.md</p></li><li><p>GCE：https://kubernetes.io/docs/concepts/cluster-administration/cluster-management/</p></li><li><p>GKE：https://cloud.google.com/container-engine/docs/cluster-autoscaler</p></li></ul><h2 id="node自动扩容-缩容-自研发" tabindex="-1"><a class="header-anchor" href="#node自动扩容-缩容-自研发"><span>Node自动扩容/缩容： 自研发</span></a></h2><p>当集群资源不足时，触发新增Node大概思路：</p><ol><li><p>申请一台服务器</p></li><li><p>调用Ansible脚本部署Node组件并自动加入集群</p></li><li><p>检查服务是否可用，加入监控</p></li><li><p>完成Node扩容，接收新Pod</p></li></ol><p><img src="'+p+'" alt=""></p><p>自动增加Node：https://gitee.com/lucky_liuzhe/ansible-install-k8s-v1.20</p><p>自动减少Node：</p><p>如果你想从Kubernetes集群中删除节点，正确流程如下：</p><p>1、获取节点列表</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> node</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2、设置不可调度</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> cordon</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> k8s-node3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+h+'" alt=""></p><p>3、驱逐节点上的Pod</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> drain</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> k8s-node3</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --ignore-daemonsets</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+r+'" alt=""></p><p>4、移除节点</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> delete</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> nodes</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> k8s-node3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+d+'" alt=""></p><h2 id="pod自动扩容-缩容-hpa介绍" tabindex="-1"><a class="header-anchor" href="#pod自动扩容-缩容-hpa介绍"><span>Pod自动扩容/缩容：HPA介绍</span></a></h2><p>Horizontal Pod Autoscaler（HPA，Pod水平自动伸缩）：根据资源利用率或者自定义指 标自动调整Deployment的Pod副本数量，提供应用并发。HPA不适于无法缩放的对象，例 如DaemonSet。</p><p><img src="'+k+'" alt=""></p><h2 id="pod自动扩容-缩容-hpa基本工作原理" tabindex="-1"><a class="header-anchor" href="#pod自动扩容-缩容-hpa基本工作原理"><span>Pod自动扩容/缩容：HPA基本工作原理</span></a></h2><p>Kubernetes 中的 Metrics Server 持续采集所有 Pod 副本的指标数据。HPA 控制器通过 Metrics Server 的 API（聚合 API）获取这些数据，基于用户定义的扩缩容规则进行计算，得到目标 Pod 副本 数量。当目标 Pod 副本数量与当前副本数量不同时，HPA 控制器就向 Pod 的Deployment控制器发起 scale 操作，调整 Pod 的副本数量，完成扩缩容操作。</p><p><img src="'+c+'" alt=""></p><h2 id="pod自动扩容-缩容-使用hpa前提条件" tabindex="-1"><a class="header-anchor" href="#pod自动扩容-缩容-使用hpa前提条件"><span>Pod自动扩容/缩容：使用HPA前提条件</span></a></h2><p>使用HPA，确保满足以下条件：</p><p>启用Kubernetes API聚合层</p><p>相应的API已注册：</p><ul><li><p>对于资源指标（例如CPU、内存），将使用metrics.k8s.io API，一般由metrics-server提供。</p></li><li><p>对于自定义指标（例如QPS），将使用custom.metrics.k8s.io API，由相关适配器（Adapter）服务提供。</p></li></ul><p>已知适配器列表：https://github.com/kubernetes/metrics/blob/master/IMPLEMENTATIONS.md#custom-metrics-api</p><p>Kubernetes API聚合层：</p><p>在 Kubernetes 1.7 版本引入了聚合层，允许第三方应用程序通过将自己注册到 kube-apiserver上，仍然通过 API Server 的 HTTP URL 对新的 API 进行访问和 操作。为了实现这个机制，Kubernetes 在 kube-apiserver 服务中引入了一个 API 聚合层（API Aggregation Layer），用于将扩展 API 的访问请求转发到用 户服务的功能。</p><p><img src="'+o+`" alt=""></p><p>启用聚合层：</p><p>如果你使用kubeadm部署的，默认已开启。</p><p>如果 你使用二进制方式部署的话，需要在kubeAPIServer中添加启动参数，增加以下配置：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#vi /opt/kubernetes/cfg/kube-apiserver.conf</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">...</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">--requestheader-client-ca-file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/opt/kubernetes/ssl/ca.pem</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> \\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">--proxy-client-cert-file=/opt/kubernetes/ssl/server.pem </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">--proxy-client-key-file=/opt/kubernetes/ssl/server-key.pem </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">--requestheader-allowed-names=kubernetes </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">--requestheader-extra-headers-prefix=X-Remote-Extra- </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">--requestheader-group-headers=X-Remote-Group </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">--requestheader-username-headers=X-Remote-User </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">--enable-aggregator-routing=true </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+`" alt=""></p><h2 id="pod自动扩容-缩容-基于资源指标" tabindex="-1"><a class="header-anchor" href="#pod自动扩容-缩容-基于资源指标"><span>Pod自动扩容/缩容：基于资源指标</span></a></h2><p>Metrics Server：是一个数据聚合器，从kubelet收集资源指标，并通 过Metrics API在Kubernetes apiserver暴露，以供HPA使用。</p><p>项目地址：https://github.com/kubernetes-sigs/metrics-server</p><p>Metrics Server部署：</p><p>wget https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#vi components.yaml </span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">...</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      containers:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> args:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --cert-dir=/tmp</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --secure-port=4443</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --kubelet-use-node-status-port</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        -</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --kubelet-insecure-tls</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        image:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> lizhenliang/metrics-server:v0.4.1</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>kubelet-insecure-tls：不验证kubelet提供的https证书</p><p>测试：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apiservices</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">grep</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> metrics</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --raw</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /apis/metrics.k8s.io/v1beta1/nodes</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --raw</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /apis/metrics.k8s.io/v1beta1/pods</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用kubectl top访问Metrics API：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> top</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> node</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #查看Node资源消耗</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> top</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pod</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #查看Pod资源消耗</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果能正常显示资源消耗说明Metrics Server服务工作正常。</p><p>kubectl top ——&gt;apiserver——&gt;metrics-server——&gt;kubelet(cadivosr)——&gt;pod</p><p>1、部署应用</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> create</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> deployment</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> web</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --image=nginx</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --dry-run=client</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> yaml</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> deployment.yaml</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> expose</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> deployment</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> web</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --port=80</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --target-port=80</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --dry-run=client</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> yaml</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> service.yaml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：修改yaml，增加resources.requests.cpu</p><p>2、创建HPA</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> autoscale</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> deployment</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> web</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --min=2</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --max=10</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --cpu-percent=80</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hpa</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：为名为web的deployment创建一个HPA对象，目标CPU使用率为80%，副本数量配置为2到10之间。</p><p><img src="`+A+`" alt=""></p><p>3、压测</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">yum</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> httpd-tools</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ab</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -n</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 300000</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -c</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> http://10.0.0.236/index.html</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 总30w请求，并发1000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>4、观察扩容状态</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> hpa</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pod</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+g+'" alt=""></p><h2 id="pod自动扩容-缩容-冷却周期" tabindex="-1"><a class="header-anchor" href="#pod自动扩容-缩容-冷却周期"><span>Pod自动扩容/缩容：冷却周期</span></a></h2><p>在弹性伸缩中，冷却周期是不能逃避的一个话题， 由于评估的度量标准是动态特性，副本的数量可能会不断波动， 造成丢失流量，所以不应该在任意时间扩容和缩容。</p><p>在 HPA 中，为缓解该问题，默认有一定控制：</p><ul><li><p>--horizontal-pod-autoscaler-downscale-delay ：当前操作完成后等待多次时间才能执行缩容操作，默认5分钟</p></li><li><p>--horizontal-pod-autoscaler-upscale-delay ：当前操作完成后等待多长时间才能执行扩容操作，默认3分钟</p></li></ul><p>可以通过调整kube-controller-manager组件启动参数调整。</p><h2 id="pod自动扩容-缩容-基于自定义指标" tabindex="-1"><a class="header-anchor" href="#pod自动扩容-缩容-基于自定义指标"><span>Pod自动扩容/缩容：基于自定义指标</span></a></h2><p>为满足更多的需求，HPA也支持自定义指标，例如QPS、5xx错误状态码等，实现自定义指标由autoscaling/v2版本提供，而 v2版本又分为beta1和beta2两个版本。</p><p>这两个版本的区别是 autoscaling/v1beta1支持了 ：</p><ul><li><p>Resource Metrics（资源指标）</p></li><li><p>Custom Metrics（自定义指标）</p></li></ul><p>而在 autoscaling/v2beta2的版本中额外增加了External Metrics（扩展指标）的支持。</p><p>对于自定义指标（例如QPS），将使用custom.metrics.k8s.io API，由相关适配器（Adapter）服务提供。</p><p>已知适配器列表：https://github.com/kubernetes/metrics/blob/master/IMPLEMENTATIONS.md#custom-metrics-api</p><p><img src="'+m+'" alt=""></p><p>假设我们有一个网站，想基于每秒接收到的HTTP请求对其Pod进行 自动缩放，实现HPA大概步骤：</p><p>1、部署Prometheus</p><p>2、对应用暴露指标，部署应用，并让Prometheus采集暴露的指标</p><p>3、部署Prometheus Adapter</p><p>4、为指定HPA配置Prometheus Adapter</p><p>5、创建HPA</p><p>6、压测、验证</p><p>Prometheus（普罗米修斯）是一个开源的监控系统，在Kubernetes平台得到广泛应用。</p><p><img src="'+b+`" alt=""></p><p>1、部署Prometheus</p><p><a href="/attachments/B7E7DFAB30904CC8BFF8A51848CC571Aprometheus.zip">prometheus.zip</a></p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apply</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">prometheus-deployment.yaml</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 部署Prometheus</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">prometheus-configmap.yaml</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # Prometheus配置文件，主要配置基于Kubernetes服务发现</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">prometheus-rules.yaml</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # Prometheus告警规则</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问地址：http://NodeIP:30090</p><p><img src="`+v+'" alt=""></p><p>2、对应用暴露指标，部署应用，并让Prometheus采集暴露的指标。</p><p>在做这步之前先了解下Prometheus如何监控应用的。</p><p>如果要想监控，前提是能获取被监控端指标数据，并且这个数据格式必须遵 循Prometheus数据模型，这样才能识别和采集，一般使用exporter提供监 控指标数据。但对于自己开发的项目，是需要自己实现类似于exporter的指 标采集程序。</p><p>exporter列表：https://prometheus.io/docs/instrumenting/exporters</p><p><img src="'+y+'" alt=""></p><p>先模拟自己开发一个网站，采用Python Flask Web框架，写两个页面：</p><ul><li><p>/ 首页</p></li><li><p>/metrics 指标</p></li></ul><p>然后使用Dockefile制作成镜像并部署到Kubernetes平台。</p><p><a href="/attachments/0EAFCBECFD4F42879075E1CE8990D2EFmetrics-app.zip">metrics-app.zip</a></p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apply</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> metrics-flask-app.yaml</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  #部署应用对外暴露指标并声明让prometheus采集</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="'+C+'" alt=""></p><p>由于我们Prometheus配置了基于Kubernetes服务发现，会自动采集Pod暴露的指标：</p><p><img src="'+B+'" alt=""></p><p><img src="'+D+`" alt=""></p><p>3、部署Prometheus Adapter</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apply</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> prometheus-adapter.yaml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>验证是否正常工作：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apiservices</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">grep</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> custom</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --raw</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/apis/custom.metrics.k8s.io/v1beta1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+E+`" alt=""></p><p>4、为指定HPA配置Prometheus Adapter</p><p>增加一段配置，增加完后删除adapter pod重建生效。</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#vi prometheus-adapter.yaml</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">data:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  config.yaml:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    rules:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> seriesQuery:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">request_count_total{app=&quot;flask-app&quot;}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      resources:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        overrides:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">          kubernetes_namespace:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {resource:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">namespace</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">          kubernetes_pod_name:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> {resource:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">pod</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      name:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        matches:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">request_count_total</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        as:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">qps</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      metricsQuery:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sum(rate(&lt;&lt;.Series&gt;&gt;{&lt;&lt;.LabelMatchers&gt;&gt;}[2m])) by (&lt;&lt;.GroupBy&gt;&gt;)</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> seriesQuery:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">{__name__=~&quot;^container_.*&quot;,container!=&quot;POD&quot;,namespace!=&quot;&quot;,pod!=&quot;&quot;}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置描述：</p><ul><li><p>seriesQuery：Prometheus查询语句，查询应用系列指标。</p></li><li><p>resources：Kubernetes资源标签映射到Prometheus标签。</p></li><li><p>name：将Prometheus指标名称在自定义指标API中重命名， matches正则匹配，as指定新名称。</p></li><li><p>metricsQuery：一个Go模板，对调用自定义指标API转换为 Prometheus查询语句。</p></li></ul><p>Adapter向Prometheus查询语句最终是：</p><p>sum(rate(request_count_total{app=&quot;flask-app&quot;, kubernetes_namespace=&quot;default&quot;}[2m])) by (kubernetes_pod_name)</p><p>由于HTTP请求统计是累计的，对HPA自动缩放不是特别有用，因此将其转为速率指标。 这条语句意思是：查询每个Pod在2分钟内访问速率，即QPS（每秒查询率）</p><p><img src="`+P+'" alt=""></p><p>向自定义指标API访问：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kubectl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> get</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --raw</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/apis/custom.metrics.k8s.io/v1beta1/namespaces/default/pods/*/qps</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果配置没问题，会返回JSON数据，注意里面的value字段，HPA控制器会拿这个值计算然后比对阈值。这个值单位是m，表示 毫秒，千分之一，例如值为500m是每秒0.5个请求，10000m是每秒10个请求（并发）。</p><p><img src="'+_+'" alt=""></p><p>进一步模拟验证：</p><p><img src="'+F+'" alt=""></p><p>对比请求的数据：</p><p><img src="'+x+'" alt=""></p><p><img src="'+f+`" alt=""></p><p>5、创建HPA</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#vi hpa-v2-qps.yaml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">apiVersion:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> autoscaling/v2beta2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">kind:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> HorizontalPodAutoscaler</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">metadata:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  name:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> metrics-flask-app</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  namespace:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> default</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">spec:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  minReplicas:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  maxReplicas:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  scaleTargetRef:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    apiVersion:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> apps/v1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    kind:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Deployment</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    name:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> metrics-flask-app</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  metrics:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  -</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> type:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Pods</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    pods:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      metric:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        name:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> qps</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      target:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        type</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> AverageValue</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        averageValue:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 10000m</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # 所有Pod平均值为10000m触发扩容，即每秒10个请求</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每秒超过10个请求进行扩容pod操作</p><p><img src="`+q+'" alt=""></p><p><img src="'+H+'" alt=""></p><p><img src="'+N+'" alt=""></p>',154)]))}const K=i(I,[["render",w],["__file","index.html.vue"]]),z=JSON.parse(`{"path":"/notes/k8s/bhw3hbjh/","title":"kubernetes弹性伸缩","lang":"zh-CN","frontmatter":{"title":"kubernetes弹性伸缩","createTime":"2024/09/29 12:14:50","permalink":"/notes/k8s/bhw3hbjh/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;const isDark = um === 'dark' || (um !== 'light' && sm);document.documentElement.dataset.theme = isDark ? 'dark' : 'light';})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"弹性伸缩概述","slug":"弹性伸缩概述","link":"#弹性伸缩概述","children":[]},{"level":2,"title":"Kubernetes弹性伸缩布局","slug":"kubernetes弹性伸缩布局","link":"#kubernetes弹性伸缩布局","children":[]},{"level":2,"title":"Node自动扩容/缩容","slug":"node自动扩容-缩容","link":"#node自动扩容-缩容","children":[]},{"level":2,"title":"Node自动扩容/缩容：实现思路","slug":"node自动扩容-缩容-实现思路","link":"#node自动扩容-缩容-实现思路","children":[]},{"level":2,"title":"Node自动扩容/缩容： Cluster Autoscaler","slug":"node自动扩容-缩容-cluster-autoscaler","link":"#node自动扩容-缩容-cluster-autoscaler","children":[]},{"level":2,"title":"Node自动扩容/缩容： 自研发","slug":"node自动扩容-缩容-自研发","link":"#node自动扩容-缩容-自研发","children":[]},{"level":2,"title":"Pod自动扩容/缩容：HPA介绍","slug":"pod自动扩容-缩容-hpa介绍","link":"#pod自动扩容-缩容-hpa介绍","children":[]},{"level":2,"title":"Pod自动扩容/缩容：HPA基本工作原理","slug":"pod自动扩容-缩容-hpa基本工作原理","link":"#pod自动扩容-缩容-hpa基本工作原理","children":[]},{"level":2,"title":"Pod自动扩容/缩容：使用HPA前提条件","slug":"pod自动扩容-缩容-使用hpa前提条件","link":"#pod自动扩容-缩容-使用hpa前提条件","children":[]},{"level":2,"title":"Pod自动扩容/缩容：基于资源指标","slug":"pod自动扩容-缩容-基于资源指标","link":"#pod自动扩容-缩容-基于资源指标","children":[]},{"level":2,"title":"Pod自动扩容/缩容：冷却周期","slug":"pod自动扩容-缩容-冷却周期","link":"#pod自动扩容-缩容-冷却周期","children":[]},{"level":2,"title":"Pod自动扩容/缩容：基于自定义指标","slug":"pod自动扩容-缩容-基于自定义指标","link":"#pod自动扩容-缩容-基于自定义指标","children":[]}],"readingTime":{"minutes":8.71,"words":2612},"filePathRelative":"notes/k8s/upgrade/2.kubernetes弹性伸缩.md"}`);export{K as comp,z as data};
